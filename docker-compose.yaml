version: '3.8'

services:
  auth-db:
    image: docker.io/bitnami/postgresql:17
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_DB: main
      POSTGRESQL_WAL_LEVEL: logical
    ports:
    - 5431:5432
    volumes:
    - auth-db:/bitnami/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  iam-zitadel:
    user: "${UID:-1000}"
    restart: always
    image: ghcr.io/zitadel/zitadel:latest
    command: 'start-from-init --masterkey "MasterkeyNeedsToHave32Characters" --tlsMode disabled'
    environment:
      ZITADEL_DATABASE_POSTGRES_HOST: auth-db
      ZITADEL_DATABASE_POSTGRES_PORT: 5432
      ZITADEL_DATABASE_POSTGRES_DATABASE: main
      ZITADEL_DATABASE_POSTGRES_USER_USERNAME: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_PASSWORD: zitadelpw
      ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE: disable
      ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME: postgres
      ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD: postgrespw
      ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE: disable
      ZITADEL_EXTERNALDOMAIN: iam.example.local
      ZITADEL_EXTERNALPORT: 80
      ZITADEL_PORT: 8080
      ZITADEL_EXTERNALSECURE: false
      # human user
      ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD: Password1!
      ZITADEL_FIRSTINSTANCE_ORG_HUMAN_EMAIL_ADDRESS: admin@iam.example.local
      ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORDCHANGEREQUIRED: false
      ## machine user (service-account). commenting below causes error
      # ZITADEL_FIRSTINSTANCE_MACHINEKEYPATH: /machinekey/zitadel-admin-sa.json
      # ZITADEL_FIRSTINSTANCE_ORG_MACHINE_MACHINE_USERNAME: zitadel-admin-sa
      # ZITADEL_FIRSTINSTANCE_ORG_MACHINE_MACHINE_NAME: Admin
      # ZITADEL_FIRSTINSTANCE_ORG_MACHINE_MACHINEKEY_TYPE: 1
    depends_on:
      auth-db:
        condition: service_healthy
    ports:
    - 8080:8080
    volumes:
    - auth-zitadel:/machinekey:rw

  app-db:
    image: docker.io/bitnami/postgresql:17
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_DB: main
      POSTGRESQL_WAL_LEVEL: logical
    ports:
    - 5432:5432
    volumes:
    - app-db:/bitnami/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  init-app-db:
    image: docker.io/bitnami/postgresql:17
    environment:
      PGHOST: app-db
      PGUSER: postgres
      PGPASSWORD: postgrespw
      PGDATABASE: main
    depends_on:
      app-db:
        condition: service_healthy
    entrypoint:
    - /bin/bash
    - -c
    - |
      echo "Waiting for PostgreSQL to be ready..."
      until PGPASSWORD=postgrespw psql -h app-db -U postgres -c '\q'; do
        echo "PostgreSQL is unavailable - sleeping"
        sleep 2
      done
      echo "PostgreSQL is up - executing SQL"

      psql -c "
      DO \$\$
      BEGIN
          IF NOT EXISTS (
              SELECT 1
              FROM pg_roles
              WHERE rolname = 'pgo'
          ) THEN
              CREATE ROLE pgo WITH LOGIN PASSWORD 'pgopw';
          END IF;
          IF NOT EXISTS (
              SELECT 1
              FROM pg_roles
              WHERE rolname = 'authn'
          ) THEN
              CREATE ROLE authn NOLOGIN;
          END IF;
          IF NOT EXISTS (
              SELECT 1
              FROM pg_roles
              WHERE rolname = 'anon'
          ) THEN
              CREATE ROLE anon NOLOGIN;
          END IF;
          GRANT anon TO authn;
          GRANT authn,anon to pgo;
      END
      \$\$;
      "
    restart: on-failure

  envoy-controlplane:
    build:
      context: "."
      dockerfile: "./internal/util/envoy/Containerfile"
    entrypoint: /envoy-controlplane
    ports:
    - 18000:18000 # xds-server
    environment:
    - "DEBUG=true"

  envoy:
    image: docker.io/envoyproxy/envoy:contrib-v1.33-latest
    command: [envoy, --config-path, /etc/bootstrap.yaml, --base-id, 1]
    privileged: true
    ports:
    - 9901:9901   # admin
    - 80:10080    # http-proxy
    volumes:
    - $PWD/internal/util/envoy/bootstrap.yaml:/etc/bootstrap.yaml:rw,Z
    depends_on:
    - envoy-controlplane

volumes:
  app-db:
  auth-db:
  auth-zitadel:
